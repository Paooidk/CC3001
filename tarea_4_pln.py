# -*- coding: utf-8 -*-
"""Tarea 4 PLN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EUzZ2Ycy0K6V2scZary2g8OxuHHuvBO2

# CC3001 Otoño 2022 Tarea 4 [Paola López Neira]

## Expandir listas (No recursivo)

### Profesores
Sección 1 Iván Sipirán •
Sección 2 Patricio Poblete •
Sección 3 Nelson Baloian

# Enunciado

En esta tarea se deberá implementar una función ``expandir(L)`` que construya y retorne una lista expandida a partir de otra lista dada ``L``, de la manera que se indica a continuación.

La entrada para la función es una lista python que contiene elementos que pueden ser de tipo lista, tupla o un valor simple de cualquier tipo. El resultado debe ser una lista solo con elementos simples, que resulta de aplicar las siguientes reglas a cada elemento de la lista original:
  - si el elemento es un valor simple, éste se agrega a la lista resultante
   - Ejemplo: si la lista de entrada es $[2, 3]$ la lista de salida es $[2,3]$
  - si el elemento es a su vez también una lista, entonces cada uno de los    elementos de esa lista lista se agrega a la lista resultante como un elemento más.
   - Ejemplo: si la lista de entrada es $[2, 3, [1, 2]]$ la lista de salida es $[2,3,1,2] $
  - si el elemento es una tupla, entonces el primer elemento será un entero, digamos $x$ y el segundo una lista que llamaremos $s$. En este caso, hay que agregar $x$ veces los elementos de la lista $s$.
    - Ejemplo: si la lista de entrada contiene $[1, (2,[2,3])]$ la lista de salida es $[1, 2, 3, 2, 3] $

Lo que hace interesante este problema, es que cada elemento de una lista puede ser a su vez necesitar una expansión como explicamos anteriormente (elementos simples, listas o tuplas). **Esta vez, en lugar de solucionar el problema recursivamente, debe hacerlo de manera iterativa y usando una pila.**
    
   - Ejemplo: una lista de entrada puede ser $[5,[2,[2,[2,4,[0,(3,[1,2])]]]]]$ y la salida debe ser $[5, 2, 2, 2, 4, 0, 1, 2, 1, 2, 1, 2]$

   Se le pide entonces escribir la función siguiente:
"""

#Para crear la pila debo implementar una clase pila primero (como lo visto en clases)
class Pila:
    def __init__(self):
        self.s=[]
    def push(self,x):
        self.s.append(x)
    def pop(self):
        assert len(self.s)>0
        return self.s.pop() # pop de lista, no de Pila
    def is_empty(self):
        return len(self.s)==0


def expandir(L):
  #incluir aqui sus instrucciones
  x = Pila() #creo una pila
  y = [] #creo una lista vacia
  z = len(L)

  for i in range(z): #recorro la lista
    x.push(L[i]) #guardo cada elemento de la lista en la pila

  while x.is_empty() == False: #mientras la pila sea distinto de vacío repetimos el proceso
    a = x.pop() #reviso qué tipo de elemento es

    if type(a) is tuple:
      m = a[0]*a[1] #defino la lista a recorrer
      n = len(m)
      for k in range(n): #recorro la lista y agrego cada elemento en ella
        x.push(m[k])

    if type(a) is list:
      p = len(a)
      for j in range(p):
        x.push(a[j]) #guardo cada elemento en la pila para que después revise qué tipo de elemento es

    if type(a) is not tuple and type(a) is not list: #si es int agrego el elemento a la lista
      y.append(a)

  y.reverse() #como la pila se vacia al revés y como debo sacar cada elemento ordenado, invierto los elementos de la pila
  return y

"""Para chequear si su función hace lo que requiere use los siguientes chequeos:"""

if expandir([1,2,3]) == [1,2,3]: print("OK");
else: print("Error")
if expandir([1, (2, [2, 3, [1, 2]]),5]) == [1, 2, 3, 1, 2, 2, 3, 1, 2, 5]: print("OK");
else: print("Error")
if expandir([1, (5,[1,3])]) == [1, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]: print("OK");
else: print("Error")
if expandir([]) == []: print("OK");
else: print("Error")
if expandir([2,(3,[5,3,[2,(3,[2,4])]])]) == [2, 5, 3, 2, 2, 4, 2, 4, 2, 4, 5, 3, 2, 2, 4, 2, 4, 2, 4, 5, 3, 2, 2, 4, 2, 4, 2, 4]:
  print("OK");
else: print("Error")
if expandir([3, (2, [1, (5,[1,3])])]) == [3, 1, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]:
  print("OK")
else: print("Error")

"""## ¿Qué hay que entregar?

Usted debe crear una copia de este documento (del menú seleccionar "Archivo" o "File" y de ahi la opción "guardar copia en Drive" o "save a copy in Drive"). Este nuevo documento (notebook de Colab) es el que debe modificar para luego compartirlo con la opción "Cualquier usuario de internet con este enlace puede ver esto" (o “Anyone on the internet with this link can view”). Esta opción se encuentra disponible en la parte superior derecha de su notebook, en el botón "Compartir" (o "Share"). Una vez que tenga disponible el enlace, colocarlo en la descripción de la entrega de su tarea. No olvide colocar su nombre dentro del notebook.
"""

