# -*- coding: utf-8 -*-
"""Ejercicio1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1874TGnYo1w0hqJWgcKb5HQym8LotejmA

# **Ejercicio 1: "Partición de Lomuto"**
**Nombre:** Paola López Neira
"""

def particionLomuto(a,p):
    # retorna el punto de corte, el número de elementos <p y la lista particionada
    n=len(a) #largo de la matriz a
    #el inicio en ambos casos sera al comienzo de la matriz
    (i,j)=(0,0)
    # escribir acá el algoritmo de partición de Lomuto
    # partiremos revisando j
    while j<=n-1: #revisamos hasta el final de la matriz por eso usamos n-1 (dado que 0 se contabiliza como el comienzo)
      if p<a[j]:
        j+=1 #esto significa que avanza puesto que es mayor que el pivote "p"
      else:
        z=a[i] # "z" será nuestra variable auxiliar
        a[i]=a[j] # como el número es menor que el pivote, intercambiamos a[i] con a[j]
        a[j]=z
        i+=1
        j+=1   #tanto a[i] como a[j] avanzan

    return (p,i,a) #retorna la partición correspondiente

def verifica_particion(t): # imprime y chequea partición
    (p,m,a)=t
    # p=punto de corte, m=número de elementos <p, a=lista completa particionada
    print(a[0:m],p,a[m:])
    print("Partición OK" if (m==0 or max(a[0:m])<p) and (m==len(a) or min(a[m:])>p)
          else "Error")

verifica_particion(particionLomuto([73,21,34,98,56,37,77,65,82,15,36],50))

verifica_particion(particionLomuto([73,21,34,98,56,37,77,65,82,15,36],0))

verifica_particion(particionLomuto([73,21,34,98,56,37,77,65,82,15,36],100))