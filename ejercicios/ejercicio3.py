# -*- coding: utf-8 -*-
"""Ejercicio3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12iGZQ5LKTUMdhJudbmOQHJVzCVHKQ_zr

### Ejercicio 3.3
### Nombre: Paola López Neira

Modifique la función ``LCS`` para que retorne una subsecuencia común más larga, en lugar de retornar su longitud.

Recordemos que el algoritmo del apunte va llenando una martiz $L$, donde $L[i,j]$ contiene el largo de la subsecuencia común mas larga entre $a[0:i]$ y $b[0:j]$. Su algoritmo modificado debe ir llenando en paralelo una matriz $S$, tal que $S[i,j]$ contenga un string que es la subsecuencia común más larga entre $a[0:i]$ y $b[0:j]$.

Para ayudarlo, el siguiente código ya tiene la definición de la matriz y la inicialización respectiva. Usted tiene que encargarse de modificar todo lo demás que sea necesario para cumplir con lo pedido.
"""

import numpy as np
def LCS(a,b):
    """
    Encuentra el largo de la subsecuencia común más larga entre a y b
    """
    m=len(a)
    n=len(b)
    L=np.zeros((m+1,n+1),dtype=int)
    S=np.empty((m+1,n+1),dtype=object)
    for i in range(0,m+1):
      S[i,0]=""
    for j in range(0,n+1):
      S[0,j]=""
    for i in range(1,m+1):
        for j in range(1,n+1):
            if a[i-1]==b[j-1]:
                L[i,j]=1+L[i-1,j-1]
                S[i,j]=S[i-1,j-1] + a[i-1]
            else: # lo siguiente es equivalente a L[i,j]=max(L[i-1,j],L[i,j-1])
                if L[i-1,j]>L[i,j-1]:
                    L[i,j]=L[i-1,j]
                    S[i,j]=S[i-1,j]
                else:
                    L[i,j]=L[i,j-1]
                    S[i,j]=S[i,j-1]

    return S[m,n]

assert LCS("abracadabra","pasapalabra")=="aaaabra"

assert LCS("matemáticas","computación")=="mta"